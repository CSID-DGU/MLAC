{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import model_selection\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import precision_score, recall_score, confusion_matrix, classification_report, accuracy_score, f1_score\n",
    "from sklearn import metrics\n",
    "\n",
    "# 데이터 불러오기\n",
    "FILE = 'CICItoCICI'\n",
    "data = pd.read_csv('/home/wendyunji/MLAC_steps/ProcessedDataset/'+FILE+'.csv')\n",
    "target = data['attack_cat']\n",
    "data = data.drop(labels=['label','attack_cat'], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.3, shuffle=True, stratify=target, random_state=34)\n",
    "\n",
    "# 모델 정의하기\n",
    "models = []\n",
    "models.append(('RF', RandomForestClassifier(max_depth=5, n_estimators=5, max_features=3)))    \n",
    "models.append(('CART', DecisionTreeClassifier(max_depth=5)))\n",
    "models.append(('NB', GaussianNB()))\n",
    "models.append(('LDA', LinearDiscriminantAnalysis()))\n",
    "models.append(('QDA', QuadraticDiscriminantAnalysis()))\n",
    "models.append(('LR', LogisticRegression(solver='lbfgs', max_iter=200)))\n",
    "models.append(('ABoost', AdaBoostClassifier()))\n",
    "models.append(('KNN', KNeighborsClassifier()))\n",
    "models.append(('MLP', MLPClassifier()))\n",
    "\n",
    "# 예측값 얻기\n",
    "accuracy = pd.DataFrame(columns=['Model','Acc','F1_mi','Recall_mi','Precision_mi','F1_ma','Recall_ma','Precision_ma','F1_we','Recall_we','Precision_we','Execution'])\n",
    "cnt = 0\n",
    "for name, model in models:\n",
    "    start_time = time.time()\n",
    "    # 모델 훈련 및 예측\n",
    "    model.fit(X_train, y_train)\n",
    "    prediction = model.predict(X_test)\n",
    "    # 지표 추출\n",
    "    delta = time.time() - start_time\n",
    "    acc = accuracy_score(y_test, prediction)\n",
    "    f1_mi = f1_score(y_test, prediction,average='micro')\n",
    "    f1_ma = f1_score(y_test, prediction,average='macro')\n",
    "    f1_we = f1_score(y_test, prediction,average='weighted')\n",
    "    recall_mi = recall_score(y_test, prediction, average='micro')\n",
    "    recall_ma = recall_score(y_test, prediction, average='macro')\n",
    "    recall_we = recall_score(y_test, prediction, average='weighted')\n",
    "    precision_mi = precision_score(y_test, prediction, average='micro')\n",
    "    precision_ma = precision_score(y_test, prediction, average='macro')\n",
    "    precision_we = precision_score(y_test, prediction, average='weighted')\n",
    "    confusion = metrics.confusion_matrix(y_test, prediction)\n",
    "    # 저장\n",
    "    accuracy.loc[cnt] = [name, acc, f1_mi, f1_ma, f1_we, recall_mi, recall_ma, recall_we, precision_mi, precision_ma, precision_we, delta]\n",
    "    cnt += 1\n",
    "    matrix = open('/home/wendyunji/MLAC_steps/Result/ConfusionMatrix/Binary/'+name,'w')\n",
    "    matrix.write(confusion)"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
